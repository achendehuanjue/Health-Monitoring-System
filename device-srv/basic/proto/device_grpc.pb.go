// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: device.pex-proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
<<<<<<< HEAD
	DeviceSrv_DeviceList_FullMethodName   = "/proto.DeviceSrv/DeviceList"
	DeviceSrv_BrandAdd_FullMethodName     = "/proto.DeviceSrv/BrandAdd"
	DeviceSrv_BrandDel_FullMethodName     = "/proto.DeviceSrv/BrandDel"
	DeviceSrv_BrandUpdate_FullMethodName  = "/proto.DeviceSrv/BrandUpdate"
	DeviceSrv_GetBrandList_FullMethodName = "/proto.DeviceSrv/GetBrandList"
=======
	DeviceSrv_BrandAdd_FullMethodName     = "/pex-proto.DeviceSrv/BrandAdd"
	DeviceSrv_BrandDel_FullMethodName     = "/pex-proto.DeviceSrv/BrandDel"
	DeviceSrv_BrandUpdate_FullMethodName  = "/pex-proto.DeviceSrv/BrandUpdate"
	DeviceSrv_GetBrandList_FullMethodName = "/pex-proto.DeviceSrv/GetBrandList"
>>>>>>> master
)

// DeviceSrvClient is the client API for DeviceSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceSrvClient interface {
	DeviceList(ctx context.Context, in *DeviceListReq, opts ...grpc.CallOption) (*DeviceListResp, error)
	BrandAdd(ctx context.Context, in *BrandAddReq, opts ...grpc.CallOption) (*BrandAddResp, error)
	BrandDel(ctx context.Context, in *BrandDelReq, opts ...grpc.CallOption) (*BrandDelResp, error)
	BrandUpdate(ctx context.Context, in *BrandUpdateReq, opts ...grpc.CallOption) (*BrandUpdateResp, error)
	GetBrandList(ctx context.Context, in *GetBrandListReq, opts ...grpc.CallOption) (*GetBrandListResp, error)
}

type deviceSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceSrvClient(cc grpc.ClientConnInterface) DeviceSrvClient {
	return &deviceSrvClient{cc}
}

func (c *deviceSrvClient) DeviceList(ctx context.Context, in *DeviceListReq, opts ...grpc.CallOption) (*DeviceListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceListResp)
	err := c.cc.Invoke(ctx, DeviceSrv_DeviceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSrvClient) BrandAdd(ctx context.Context, in *BrandAddReq, opts ...grpc.CallOption) (*BrandAddResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandAddResp)
	err := c.cc.Invoke(ctx, DeviceSrv_BrandAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSrvClient) BrandDel(ctx context.Context, in *BrandDelReq, opts ...grpc.CallOption) (*BrandDelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandDelResp)
	err := c.cc.Invoke(ctx, DeviceSrv_BrandDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSrvClient) BrandUpdate(ctx context.Context, in *BrandUpdateReq, opts ...grpc.CallOption) (*BrandUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandUpdateResp)
	err := c.cc.Invoke(ctx, DeviceSrv_BrandUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSrvClient) GetBrandList(ctx context.Context, in *GetBrandListReq, opts ...grpc.CallOption) (*GetBrandListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBrandListResp)
	err := c.cc.Invoke(ctx, DeviceSrv_GetBrandList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceSrvServer is the server API for DeviceSrv service.
// All implementations must embed UnimplementedDeviceSrvServer
// for forward compatibility
type DeviceSrvServer interface {
	DeviceList(context.Context, *DeviceListReq) (*DeviceListResp, error)
	BrandAdd(context.Context, *BrandAddReq) (*BrandAddResp, error)
	BrandDel(context.Context, *BrandDelReq) (*BrandDelResp, error)
	BrandUpdate(context.Context, *BrandUpdateReq) (*BrandUpdateResp, error)
	GetBrandList(context.Context, *GetBrandListReq) (*GetBrandListResp, error)
	mustEmbedUnimplementedDeviceSrvServer()
}

// UnimplementedDeviceSrvServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceSrvServer struct {
}

func (UnimplementedDeviceSrvServer) DeviceList(context.Context, *DeviceListReq) (*DeviceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceList not implemented")
}
func (UnimplementedDeviceSrvServer) BrandAdd(context.Context, *BrandAddReq) (*BrandAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandAdd not implemented")
}
func (UnimplementedDeviceSrvServer) BrandDel(context.Context, *BrandDelReq) (*BrandDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandDel not implemented")
}
func (UnimplementedDeviceSrvServer) BrandUpdate(context.Context, *BrandUpdateReq) (*BrandUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandUpdate not implemented")
}
func (UnimplementedDeviceSrvServer) GetBrandList(context.Context, *GetBrandListReq) (*GetBrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandList not implemented")
}
func (UnimplementedDeviceSrvServer) mustEmbedUnimplementedDeviceSrvServer() {}

// UnsafeDeviceSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceSrvServer will
// result in compilation errors.
type UnsafeDeviceSrvServer interface {
	mustEmbedUnimplementedDeviceSrvServer()
}

func RegisterDeviceSrvServer(s grpc.ServiceRegistrar, srv DeviceSrvServer) {
	s.RegisterService(&DeviceSrv_ServiceDesc, srv)
}

func _DeviceSrv_DeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSrvServer).DeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSrv_DeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSrvServer).DeviceList(ctx, req.(*DeviceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSrv_BrandAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSrvServer).BrandAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSrv_BrandAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSrvServer).BrandAdd(ctx, req.(*BrandAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSrv_BrandDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSrvServer).BrandDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSrv_BrandDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSrvServer).BrandDel(ctx, req.(*BrandDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSrv_BrandUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSrvServer).BrandUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSrv_BrandUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSrvServer).BrandUpdate(ctx, req.(*BrandUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSrv_GetBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSrvServer).GetBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSrv_GetBrandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSrvServer).GetBrandList(ctx, req.(*GetBrandListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceSrv_ServiceDesc is the grpc.ServiceDesc for DeviceSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pex-proto.DeviceSrv",
	HandlerType: (*DeviceSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceList",
			Handler:    _DeviceSrv_DeviceList_Handler,
		},
		{
			MethodName: "BrandAdd",
			Handler:    _DeviceSrv_BrandAdd_Handler,
		},
		{
			MethodName: "BrandDel",
			Handler:    _DeviceSrv_BrandDel_Handler,
		},
		{
			MethodName: "BrandUpdate",
			Handler:    _DeviceSrv_BrandUpdate_Handler,
		},
		{
			MethodName: "GetBrandList",
			Handler:    _DeviceSrv_GetBrandList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.pex-proto",
}
