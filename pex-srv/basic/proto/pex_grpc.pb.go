// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: pex.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EMQXSrv_TemperatureEMQX_FullMethodName   = "/proto.EMQXSrv/TemperatureEMQX"
	EMQXSrv_BloodGlucoseEMQX_FullMethodName  = "/proto.EMQXSrv/BloodGlucoseEMQX"
	EMQXSrv_BloodPressureEMQX_FullMethodName = "/proto.EMQXSrv/BloodPressureEMQX"
	EMQXSrv_BloodOxygenEMQX_FullMethodName   = "/proto.EMQXSrv/BloodOxygenEMQX"
)

// EMQXSrvClient is the client API for EMQXSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EMQXSrvClient interface {
	TemperatureEMQX(ctx context.Context, in *TemperatureEMQXReq, opts ...grpc.CallOption) (*TemperatureEMQXResp, error)
	BloodGlucoseEMQX(ctx context.Context, in *BloodGlucoseEMQXReq, opts ...grpc.CallOption) (*BloodGlucoseEMQXResp, error)
	BloodPressureEMQX(ctx context.Context, in *BloodPressureEMQXReq, opts ...grpc.CallOption) (*BloodPressureEMQXResp, error)
	BloodOxygenEMQX(ctx context.Context, in *BloodOxygenEMQXReq, opts ...grpc.CallOption) (*BloodOxygenEMQXResp, error)
}

type eMQXSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewEMQXSrvClient(cc grpc.ClientConnInterface) EMQXSrvClient {
	return &eMQXSrvClient{cc}
}

func (c *eMQXSrvClient) TemperatureEMQX(ctx context.Context, in *TemperatureEMQXReq, opts ...grpc.CallOption) (*TemperatureEMQXResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TemperatureEMQXResp)
	err := c.cc.Invoke(ctx, EMQXSrv_TemperatureEMQX_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eMQXSrvClient) BloodGlucoseEMQX(ctx context.Context, in *BloodGlucoseEMQXReq, opts ...grpc.CallOption) (*BloodGlucoseEMQXResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BloodGlucoseEMQXResp)
	err := c.cc.Invoke(ctx, EMQXSrv_BloodGlucoseEMQX_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eMQXSrvClient) BloodPressureEMQX(ctx context.Context, in *BloodPressureEMQXReq, opts ...grpc.CallOption) (*BloodPressureEMQXResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BloodPressureEMQXResp)
	err := c.cc.Invoke(ctx, EMQXSrv_BloodPressureEMQX_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eMQXSrvClient) BloodOxygenEMQX(ctx context.Context, in *BloodOxygenEMQXReq, opts ...grpc.CallOption) (*BloodOxygenEMQXResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BloodOxygenEMQXResp)
	err := c.cc.Invoke(ctx, EMQXSrv_BloodOxygenEMQX_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EMQXSrvServer is the server API for EMQXSrv service.
// All implementations must embed UnimplementedEMQXSrvServer
// for forward compatibility
type EMQXSrvServer interface {
	TemperatureEMQX(context.Context, *TemperatureEMQXReq) (*TemperatureEMQXResp, error)
	BloodGlucoseEMQX(context.Context, *BloodGlucoseEMQXReq) (*BloodGlucoseEMQXResp, error)
	BloodPressureEMQX(context.Context, *BloodPressureEMQXReq) (*BloodPressureEMQXResp, error)
	BloodOxygenEMQX(context.Context, *BloodOxygenEMQXReq) (*BloodOxygenEMQXResp, error)
	mustEmbedUnimplementedEMQXSrvServer()
}

// UnimplementedEMQXSrvServer must be embedded to have forward compatible implementations.
type UnimplementedEMQXSrvServer struct {
}

func (UnimplementedEMQXSrvServer) TemperatureEMQX(context.Context, *TemperatureEMQXReq) (*TemperatureEMQXResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemperatureEMQX not implemented")
}
func (UnimplementedEMQXSrvServer) BloodGlucoseEMQX(context.Context, *BloodGlucoseEMQXReq) (*BloodGlucoseEMQXResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BloodGlucoseEMQX not implemented")
}
func (UnimplementedEMQXSrvServer) BloodPressureEMQX(context.Context, *BloodPressureEMQXReq) (*BloodPressureEMQXResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BloodPressureEMQX not implemented")
}
func (UnimplementedEMQXSrvServer) BloodOxygenEMQX(context.Context, *BloodOxygenEMQXReq) (*BloodOxygenEMQXResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BloodOxygenEMQX not implemented")
}
func (UnimplementedEMQXSrvServer) mustEmbedUnimplementedEMQXSrvServer() {}

// UnsafeEMQXSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EMQXSrvServer will
// result in compilation errors.
type UnsafeEMQXSrvServer interface {
	mustEmbedUnimplementedEMQXSrvServer()
}

func RegisterEMQXSrvServer(s grpc.ServiceRegistrar, srv EMQXSrvServer) {
	s.RegisterService(&EMQXSrv_ServiceDesc, srv)
}

func _EMQXSrv_TemperatureEMQX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemperatureEMQXReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EMQXSrvServer).TemperatureEMQX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EMQXSrv_TemperatureEMQX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EMQXSrvServer).TemperatureEMQX(ctx, req.(*TemperatureEMQXReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EMQXSrv_BloodGlucoseEMQX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BloodGlucoseEMQXReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EMQXSrvServer).BloodGlucoseEMQX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EMQXSrv_BloodGlucoseEMQX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EMQXSrvServer).BloodGlucoseEMQX(ctx, req.(*BloodGlucoseEMQXReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EMQXSrv_BloodPressureEMQX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BloodPressureEMQXReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EMQXSrvServer).BloodPressureEMQX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EMQXSrv_BloodPressureEMQX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EMQXSrvServer).BloodPressureEMQX(ctx, req.(*BloodPressureEMQXReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EMQXSrv_BloodOxygenEMQX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BloodOxygenEMQXReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EMQXSrvServer).BloodOxygenEMQX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EMQXSrv_BloodOxygenEMQX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EMQXSrvServer).BloodOxygenEMQX(ctx, req.(*BloodOxygenEMQXReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EMQXSrv_ServiceDesc is the grpc.ServiceDesc for EMQXSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EMQXSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EMQXSrv",
	HandlerType: (*EMQXSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TemperatureEMQX",
			Handler:    _EMQXSrv_TemperatureEMQX_Handler,
		},
		{
			MethodName: "BloodGlucoseEMQX",
			Handler:    _EMQXSrv_BloodGlucoseEMQX_Handler,
		},
		{
			MethodName: "BloodPressureEMQX",
			Handler:    _EMQXSrv_BloodPressureEMQX_Handler,
		},
		{
			MethodName: "BloodOxygenEMQX",
			Handler:    _EMQXSrv_BloodOxygenEMQX_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pex.proto",
}
